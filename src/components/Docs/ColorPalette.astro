---
import fs from "fs"

// Define types
type Swatch = {
  name: string
  value: string
}

type SwatchCategories = {
  [category: string]: Swatch[]
}

// Function to extract CSS variables from a CSS string
const extractCssVariables = (cssStyles: string) => {
  const styleBlockMatch = cssStyles.match(/(:root|\*)\s*{([^}]*)}/s);

  if (!styleBlockMatch) {
    console.log("No style block found in the CSS file.");
    process.exit(1);
  }

  const styleBlockContents = styleBlockMatch[2]; // Adjusted to get the block content
  const matches = styleBlockContents.match(/--([^:]+):([^;]+)/g);

  if (!matches) {
    console.log("No matches found in the style block contents.");
    process.exit(1);
  }

  // Create an object to store the swatches
  return matches.reduce<SwatchCategories>((acc, match) => {
    const [variable, value] = match.split(":");
    const name = variable.slice(2).trim(); // Remove the leading "--" and trim any whitespace
    const category = name.split("-")[1]; // Extract the category name

    if (!acc[category]) {
      acc[category] = [];
    }

    acc[category].push({ name, value: value.trim() }); // Preserve the spaces within the value
    return acc;
  }, {});
}



// Read the CSS files
const primaryCss = fs.readFileSync("./node_modules/sol-css/src/theme/palettes/palette.primary.css", "utf8")
const secondaryCss = fs.readFileSync("./node_modules/sol-css/src/theme/palettes/palette.secondary.css", "utf8")
const grayCss = fs.readFileSync("./node_modules/sol-css/src/theme/palettes/palette.gray.css", "utf8")
const hueCss = fs.readFileSync("./node_modules/sol-css/src/theme/palettes/hues.css", "utf8")

// Extract variables from all files
const primarySwatches = extractCssVariables(primaryCss)
const secondarySwatches = extractCssVariables(secondaryCss)
const graySwatches = extractCssVariables(grayCss)
const hueSwatches = extractCssVariables(hueCss)

// Merge swatches from primary and gray palette
const swatches = { ...primarySwatches, ...secondarySwatches, ...graySwatches }

// Helper function to capitalize words
const toCapitals = (str: string): string => {
  const words = str.split(" ")
  const capitalizedWords = words.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
  return capitalizedWords.join(" ")
}
---

<!-- Render hues as radio buttons from hue.css -->
<section id='hues'>
  <h2 id="hue-options">Hue Options</h2>
  <ul role='list'>
    {
      Object.entries(hueSwatches).map(([color, items]) => (
        <li style={`--primary-hue: var(--hue-${color})`}>
          {items.map(({ name, value }) => (
            <label style="color: var(--color-primary-5)">
              <input type='radio' name='hue' data-hue-variable={`--${name}`} />
              <strong>{toCapitals(color)} </strong>
              <small>
                <code>
                  {" --" + name} ({value})
                </code>
              </small>
            </label>
          ))}
        </li>
      ))
    }
  </ul>
</section>

<!-- Render swatches from palette.primary.css and palette.gray.css -->
<section id='palettes'>
  <h2 id="color-palettes">Color Swatches</h2>
  {
    Object.entries(swatches).map(([color, items]) => (
      <div>
        <h3 id={`color-palette-${color}`}>{toCapitals(color)}</h3>
        <ul role='list'>
          {items.map(({ name, value }) => (
            <li>
              <item style={`--swatch-color: var(--${name})`} />
              <small>
                <code>{"--" + name}</code>
                {/* <small>{value}</small> */}
              </small>
            </li>
          ))}
        </ul>
      </div>
    ))
  }
</section>



<style>

  #hues {
    ul {
      margin-block-start: 1em;
      columns: auto 20ch;
    }
     ul > * + * {
      margin-block-start: 1em;
    }
    small {
      display: block;
      padding-inline-start: 2em;
    }
  }

  #palettes {
     div + div {
      margin-block-start: var(--spacing-xl);
    }
    h2 + div {
      margin-block-start: 1em;
    }
    item {
      background-color: var(--swatch-color);
      display: inline-block;
      width: 100%;
      aspect-ratio: 1;
      border: var(--border-width-hairline) solid var(--color-separator);
    }

    small {
      display: inline-block;
    }

    ul {
      margin-block-start: 1em;
      display: grid;
      gap: var(--spacing-xs);
      grid-template-columns: repeat(auto-fit, minmax(min(100%, 7ch), 1fr));
    }
  }
</style>

<script is:inline>
  // Function to update the --primary-hue CSS variable with the corresponding --hue-* variable
  const updateHue = (event) => {
    const hueVariable = event.target.getAttribute("data-hue-variable")
    document.documentElement.style.setProperty("--primary-hue", `var(${hueVariable})`)
  }

  // Attach event listeners to radio buttons and match the current --primary-hue on page load
  document.addEventListener("DOMContentLoaded", () => {
    const hueRadios = document.querySelectorAll('input[name="hue"]')

    // Get the current --primary-hue value from the computed styles
    const currentPrimaryHue = getComputedStyle(document.documentElement).getPropertyValue("--primary-hue").trim() // Remove any extra whitespace

    // Match the current --primary-hue value with the corresponding radio button
    hueRadios.forEach((radio) => {
      const hueVariable = radio.getAttribute("data-hue-variable")
      const hueValue = getComputedStyle(document.documentElement).getPropertyValue(hueVariable).trim()

      if (hueValue === currentPrimaryHue) {
        radio.checked = true // Set the corresponding radio button as checked
      }

      // Add event listener to update --primary-hue on change
      radio.addEventListener("change", updateHue)
    })
  })
</script>
